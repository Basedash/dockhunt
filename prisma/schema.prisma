// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model App {
    name        String     @id
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    iconUrl     String? // png of the app icon
    description String?
    websiteUrl  String?
    twitterUrl  String?
    DockItem    DockItem[]
}

model Dock {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    featured  Boolean    @default(false)
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    DockItem  DockItem[]
}

model DockItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    appId     String
    app       App      @relation(fields: [appId], references: [name], onDelete: Cascade)
    position  Int
    dockId    String
    dock      Dock     @relation(fields: [dockId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String    @id @default(cuid())
    name                 String?
    image                String?
    accounts             Account[]
    sessions             Session[]
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt
    avatarUrl            String? // twitter avatar
    twitterHandle        String? // taken from twitter
    twitterFollowerCount Int? // taken from twitter
    dock                 Dock?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
