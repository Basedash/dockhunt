generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model App {
    name        String     @id
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @default(now()) @updatedAt
    iconUrl     String? // png of the app icon
    description String?
    websiteUrl  String?
    twitterUrl  String?
    dockItems   DockItem[]
}

model Dock {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    featured  Boolean    @default(false)
    userId    String     @unique
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    dockItems DockItem[]

    @@index([featured])
}

model DockItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    appId     String
    app       App      @relation(fields: [appId], references: [name], onDelete: Cascade)
    position  Int
    dockId    String
    dock      Dock     @relation(fields: [dockId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String    @id @default(cuid())
    username             String    @unique // From Twitter
    name                 String // From Twitter
    description          String? // From Twitter
    url                  String? // From Twitter
    accounts             Account[]
    sessions             Session[]
    email                String?   @unique
    emailVerified        DateTime?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @default(now()) @updatedAt
    avatarUrl            String? // From Twitter
    twitterFollowerCount Int? // From Twitter
    dock                 Dock?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
